function [q, l, u, v, w] = NP_MC_to_qlu(x, c)
    % From N pairs of point correspondences and M pairs of circles
    % (N + M == 3) to division model parameter [q],
    % vanishing line [l] and three vanishing points [u, v, w]
    %
    % Args:
    %   x --  12xN array, where 12 = 2 * 6 -- 2 point csponds
    %   c --  8xM array, where 8 = 2 * 4 -- 2 circles
    %   underparametrized by [px; py; nx; ny] (see Wildenauer BMVC13)

    u0 = []; u1 = []; u2 = [];
    if nargin >= 1 && ~isempty(x)
        [u0_, u1_, u2_] = NP_to_u(x);
        u0 = [u0 u0_]; u1 = [u1 u1_]; u2 = [u2 u2_];
    end
    if nargin == 2 && ~isempty(c)
        [u0_, u1_, u2_] = MC_to_u(c);
        u0 = [u0 u0_]; u1 = [u1 u1_]; u2 = [u2 u2_];
    end
    
    % Coefficients for det(U)=0 which is quartic w.r.t. q
    coeffs_q(1)=u1(1,1)*u1(2,2)*u2(3,3) - u1(1,1)*u1(2,3)*u2(3,2) - u1(2,1)*u1(1,2)*u2(3,3) + u1(2,1)*u1(1,3)*u2(3,2) + u1(1,2)*u1(2,3)*u2(3,1) - u1(2,2)*u1(1,3)*u2(3,1);
    coeffs_q(2)=u0(1,1)*u1(2,2)*u2(3,3) - u0(1,1)*u1(2,3)*u2(3,2) - u0(2,1)*u1(1,2)*u2(3,3) + u0(2,1)*u1(1,3)*u2(3,2) - u0(1,2)*u1(2,1)*u2(3,3) + u0(1,2)*u1(2,3)*u2(3,1) + u0(2,2)*u1(1,1)*u2(3,3) - u0(2,2)*u1(1,3)*u2(3,1) + u0(1,3)*u1(2,1)*u2(3,2) - u0(1,3)*u1(2,2)*u2(3,1) - u0(2,3)*u1(1,1)*u2(3,2) + u0(2,3)*u1(1,2)*u2(3,1) + u1(1,1)*u1(2,2)*u1(3,3) - u1(1,1)*u1(3,2)*u1(2,3) - u1(2,1)*u1(1,2)*u1(3,3) + u1(2,1)*u1(3,2)*u1(1,3) + u1(3,1)*u1(1,2)*u1(2,3) - u1(3,1)*u1(2,2)*u1(1,3);
    coeffs_q(3)=u0(1,1)*u0(2,2)*u2(3,3) - u0(1,1)*u0(2,3)*u2(3,2) + u0(1,1)*u1(2,2)*u1(3,3) - u0(1,1)*u1(3,2)*u1(2,3) - u0(2,1)*u0(1,2)*u2(3,3) + u0(2,1)*u0(1,3)*u2(3,2) - u0(2,1)*u1(1,2)*u1(3,3) + u0(2,1)*u1(3,2)*u1(1,3) + u0(3,1)*u1(1,2)*u1(2,3) - u0(3,1)*u1(2,2)*u1(1,3) + u0(1,2)*u0(2,3)*u2(3,1) - u0(1,2)*u1(2,1)*u1(3,3) + u0(1,2)*u1(3,1)*u1(2,3) - u0(2,2)*u0(1,3)*u2(3,1) + u0(2,2)*u1(1,1)*u1(3,3) - u0(2,2)*u1(3,1)*u1(1,3) - u0(3,2)*u1(1,1)*u1(2,3) + u0(3,2)*u1(2,1)*u1(1,3) + u0(1,3)*u1(2,1)*u1(3,2) - u0(1,3)*u1(3,1)*u1(2,2) - u0(2,3)*u1(1,1)*u1(3,2) + u0(2,3)*u1(3,1)*u1(1,2) + u0(3,3)*u1(1,1)*u1(2,2) - u0(3,3)*u1(2,1)*u1(1,2);
    coeffs_q(4)=u0(1,1)*u0(2,2)*u1(3,3) - u0(1,1)*u0(3,2)*u1(2,3) - u0(1,1)*u0(2,3)*u1(3,2) + u0(1,1)*u0(3,3)*u1(2,2) - u0(2,1)*u0(1,2)*u1(3,3) + u0(2,1)*u0(3,2)*u1(1,3) + u0(2,1)*u0(1,3)*u1(3,2) - u0(2,1)*u0(3,3)*u1(1,2) + u0(3,1)*u0(1,2)*u1(2,3) - u0(3,1)*u0(2,2)*u1(1,3) - u0(3,1)*u0(1,3)*u1(2,2) + u0(3,1)*u0(2,3)*u1(1,2) + u0(1,2)*u0(2,3)*u1(3,1) - u0(1,2)*u0(3,3)*u1(2,1) - u0(2,2)*u0(1,3)*u1(3,1) + u0(2,2)*u0(3,3)*u1(1,1) + u0(3,2)*u0(1,3)*u1(2,1) - u0(3,2)*u0(2,3)*u1(1,1);
    coeffs_q(5)=u0(1,1)*u0(2,2)*u0(3,3) - u0(1,1)*u0(3,2)*u0(2,3) - u0(2,1)*u0(1,2)*u0(3,3) + u0(2,1)*u0(3,2)*u0(1,3) + u0(3,1)*u0(1,2)*u0(2,3) - u0(3,1)*u0(2,2)*u0(1,3);

    q = roots(coeffs_q);
    if nargout >= 2
        num_sols = numel(q);
        l = zeros(3,num_sols);
        u = zeros(3,num_sols);
        v = zeros(3,num_sols);
        w = zeros(3,num_sols);
        for k = 1:num_sols
            U = u0 + u1 .* q(k) + u2 .* q(k)^2;
            u(:,k) = U(:,3);
            v(:,k) = U(:,2);
            w(:,k) = U(:,1);
            [V,~,~] = svd(U);
            l(:,k) = V(:,end);
        end
    end
    q=q';
end
