function [q, u, v, w] = NP_MC_to_qfu(x, c)
    % From N pairs of point correspondences and M pairs of circles
    % (N + M == 3) to division model parameter [q],
    % focal length [f] and three vanishing points [u, v, w]
    %
    % Args:
    %   x --  12xN array, where 12 = 2 * (2 * 3) -- 2 point csponds
    %   c --  8xM array, where 8 = 2 * (2 + 2) -- 2 circles
    %   underparametrized by [px; py; nx; ny] (see Wildenauer BMVC13)

    u0 = []; % coefficients of 1
    u1 = []; % coefficients of q
    u2 = []; % coefficients of q^2
    if nargin >= 1 && ~isempty(x)
        [u0_, u1_, u2_] = NP_to_u(x);
        u0 = [u0 u0_];
        u1 = [u1 u1_];
        u2 = [u2 u2_];
    end
    if nargin == 2 && ~isempty(c)
        [u0_, u1_, u2_] = MC_to_u(c);
        u0 = [u0 u0_];
        u1 = [u1 u1_];
        u2 = [u2 u2_];
    end
    q1 = roots(fliplr(coeffs_q(u0, u1, u2)));
    q2 = roots(fliplr(coeffs_q(u0(:,[3 1 2]),u1(:,[3 1 2]),u2(:,[3 1 2]))));
    q = [q1; q2];

    num_sols = numel(q);
    u = zeros(3,num_sols);
    v = zeros(3,num_sols);
    w = zeros(3,num_sols);
    for k = 1:num_sols
        U = u0 + u1 .* q(k) + u2 .* q(k)^2;
        u(:,k) = U(:,3);
        v(:,k) = U(:,2);
        w(:,k) = U(:,1);
    end
    q=q';
end

function c = coeffs_q(u0, u1, u2)
    % u(1)*w(1) + u(2)*w(2)) * u(3)*v(3) - (u(1)*v(1) + u(2)*v(2)) * u(3)*w(3)
    % Coefficients for u(1)*w(1) + u(2)*w(2)) * u(3)*v(3) - (u(1)*v(1) + u(2)*v(2)) * u(3)*w(3) = 0

    c(1) = u0(3,1)*u0(3,2)*(u0(1,1)*u0(1,3) + u0(2,1)*u0(2,3)) - u0(3,1)*u0(3,3)*(u0(1,1)*u0(1,2) + u0(2,1)*u0(2,2));

    c(2) = u0(3,2)*(u0(3,1)*(u0(1,1)*u1(1,3) + u0(1,3)*u1(1,1) + u0(2,1)*u1(2,3) + u0(2,3)*u1(2,1)) + u1(3,1)*(u0(1,1)*u0(1,3) + u0(2,1)*u0(2,3))) - u0(3,3)*(u0(3,1)*(u0(1,1)*u1(1,2) + u0(1,2)*u1(1,1) + u0(2,1)*u1(2,2) + u0(2,2)*u1(2,1)) + u1(3,1)*(u0(1,1)*u0(1,2) + u0(2,1)*u0(2,2))) - u0(3,1)*u1(3,3)*(u0(1,1)*u0(1,2) + u0(2,1)*u0(2,2)) + u0(3,1)*u1(3,2)*(u0(1,1)*u0(1,3) + u0(2,1)*u0(2,3));
    
    c(3) = u0(3,2)*(u1(3,1)*(u0(1,1)*u1(1,3) + u0(1,3)*u1(1,1) + u0(2,1)*u1(2,3) + u0(2,3)*u1(2,1)) + u2(3,1)*(u0(1,1)*u0(1,3) + u0(2,1)*u0(2,3)) + u0(3,1)*(u1(1,1)*u1(1,3) + u1(2,1)*u1(2,3))) - u0(3,3)*(u1(3,1)*(u0(1,1)*u1(1,2) + u0(1,2)*u1(1,1) + u0(2,1)*u1(2,2) + u0(2,2)*u1(2,1)) + u2(3,1)*(u0(1,1)*u0(1,2) + u0(2,1)*u0(2,2)) + u0(3,1)*(u1(1,1)*u1(1,2) + u1(2,1)*u1(2,2))) - u1(3,3)*(u0(3,1)*(u0(1,1)*u1(1,2) + u0(1,2)*u1(1,1) + u0(2,1)*u1(2,2) + u0(2,2)*u1(2,1)) + u1(3,1)*(u0(1,1)*u0(1,2) + u0(2,1)*u0(2,2))) + u1(3,2)*(u0(3,1)*(u0(1,1)*u1(1,3) + u0(1,3)*u1(1,1) + u0(2,1)*u1(2,3) + u0(2,3)*u1(2,1)) + u1(3,1)*(u0(1,1)*u0(1,3) + u0(2,1)*u0(2,3))) - u0(3,1)*u2(3,3)*(u0(1,1)*u0(1,2) + u0(2,1)*u0(2,2)) + u0(3,1)*u2(3,2)*(u0(1,1)*u0(1,3) + u0(2,1)*u0(2,3));
    
    c(4) = u1(3,2)*(u1(3,1)*(u0(1,1)*u1(1,3) + u0(1,3)*u1(1,1) + u0(2,1)*u1(2,3) + u0(2,3)*u1(2,1)) + u2(3,1)*(u0(1,1)*u0(1,3) + u0(2,1)*u0(2,3)) + u0(3,1)*(u1(1,1)*u1(1,3) + u1(2,1)*u1(2,3))) - u1(3,3)*(u1(3,1)*(u0(1,1)*u1(1,2) + u0(1,2)*u1(1,1) + u0(2,1)*u1(2,2) + u0(2,2)*u1(2,1)) + u2(3,1)*(u0(1,1)*u0(1,2) + u0(2,1)*u0(2,2)) + u0(3,1)*(u1(1,1)*u1(1,2) + u1(2,1)*u1(2,2))) - u2(3,3)*(u0(3,1)*(u0(1,1)*u1(1,2) + u0(1,2)*u1(1,1) + u0(2,1)*u1(2,2) + u0(2,2)*u1(2,1)) + u1(3,1)*(u0(1,1)*u0(1,2) + u0(2,1)*u0(2,2))) + u2(3,2)*(u0(3,1)*(u0(1,1)*u1(1,3) + u0(1,3)*u1(1,1) + u0(2,1)*u1(2,3) + u0(2,3)*u1(2,1)) + u1(3,1)*(u0(1,1)*u0(1,3) + u0(2,1)*u0(2,3))) - u0(3,3)*(u2(3,1)*(u0(1,1)*u1(1,2) + u0(1,2)*u1(1,1) + u0(2,1)*u1(2,2) + u0(2,2)*u1(2,1)) + u1(3,1)*(u1(1,1)*u1(1,2) + u1(2,1)*u1(2,2))) + u0(3,2)*(u2(3,1)*(u0(1,1)*u1(1,3) + u0(1,3)*u1(1,1) + u0(2,1)*u1(2,3) + u0(2,3)*u1(2,1)) + u1(3,1)*(u1(1,1)*u1(1,3) + u1(2,1)*u1(2,3)));

    c(5) = u2(3,2)*(u1(3,1)*(u0(1,1)*u1(1,3) + u0(1,3)*u1(1,1) + u0(2,1)*u1(2,3) + u0(2,3)*u1(2,1)) + u2(3,1)*(u0(1,1)*u0(1,3) + u0(2,1)*u0(2,3)) + u0(3,1)*(u1(1,1)*u1(1,3) + u1(2,1)*u1(2,3))) - u2(3,3)*(u1(3,1)*(u0(1,1)*u1(1,2) + u0(1,2)*u1(1,1) + u0(2,1)*u1(2,2) + u0(2,2)*u1(2,1)) + u2(3,1)*(u0(1,1)*u0(1,2) + u0(2,1)*u0(2,2)) + u0(3,1)*(u1(1,1)*u1(1,2) + u1(2,1)*u1(2,2))) - u1(3,3)*(u2(3,1)*(u0(1,1)*u1(1,2) + u0(1,2)*u1(1,1) + u0(2,1)*u1(2,2) + u0(2,2)*u1(2,1)) + u1(3,1)*(u1(1,1)*u1(1,2) + u1(2,1)*u1(2,2))) + u1(3,2)*(u2(3,1)*(u0(1,1)*u1(1,3) + u0(1,3)*u1(1,1) + u0(2,1)*u1(2,3) + u0(2,3)*u1(2,1)) + u1(3,1)*(u1(1,1)*u1(1,3) + u1(2,1)*u1(2,3))) - u0(3,3)*u2(3,1)*(u1(1,1)*u1(1,2) + u1(2,1)*u1(2,2)) + u0(3,2)*u2(3,1)*(u1(1,1)*u1(1,3) + u1(2,1)*u1(2,3));
    
    c(6) = u2(3,2)*(u2(3,1)*(u0(1,1)*u1(1,3) + u0(1,3)*u1(1,1) + u0(2,1)*u1(2,3) + u0(2,3)*u1(2,1)) + u1(3,1)*(u1(1,1)*u1(1,3) + u1(2,1)*u1(2,3))) - u2(3,3)*(u2(3,1)*(u0(1,1)*u1(1,2) + u0(1,2)*u1(1,1) + u0(2,1)*u1(2,2) + u0(2,2)*u1(2,1)) + u1(3,1)*(u1(1,1)*u1(1,2) + u1(2,1)*u1(2,2))) - u1(3,3)*u2(3,1)*(u1(1,1)*u1(1,2) + u1(2,1)*u1(2,2)) + u1(3,2)*u2(3,1)*(u1(1,1)*u1(1,3) + u1(2,1)*u1(2,3));

    c(7) = u2(3,1)*u2(3,2)*(u1(1,1)*u1(1,3) + u1(2,1)*u1(2,3)) - u2(3,1)*u2(3,3)*(u1(1,1)*u1(1,2) + u1(2,1)*u1(2,2));
end